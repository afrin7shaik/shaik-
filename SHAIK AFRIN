QUESTION - 1

1 -  DOCKER FILE:
FROM python:3.9-slim
WORKDIR /app
COPY . /app

RUN pip install --no-cache-dir -r requirements.txt

EXPOSE 8080

CMD ["python", "app.py"]


2 - KUBERNETES DEPLOYMENT (deployment.yaml):
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wisecow-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wisecow
  template:
    metadata:
      labels:
        app: wisecow
    spec:
      containers:
        - name: wisecow
          image: <container-registry>/wisecow:latest
          ports:
            - containerPort: 8080


3 - KBERNETES SERVICE (service.yaml):
apiVersion: v1
kind: Service
metadata:
  name: wisecow-service
spec:
  selector:
    app: wisecow
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer


4 - CI/CD GIT HUB ACTIONS WORK FLOW (ci-cd.yml):
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t <container-registry>/wisecow:latest .
          docker push <container-registry>/wisecow:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Deploy to Kubernetes
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml


5 -  TLS INGRESS SET UP (ingress.yaml):
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wisecow-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - yourdomain.com
      secretName: wisecow-tls
  rules:
    - host: yourdomain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: wisecow-service
                port:
                  number: 80



QUESTION - 2

PYTHON SCRIPT FOR SYSTEM HEALTH MONITORING:
import psutil
import time
import logging

logging.basicConfig(filename="system_health.log", level=logging.INFO, format="%(asctime)s - %(message)s")

# Define thresholds
CPU_THRESHOLD = 80  # 80% CPU usage
MEMORY_THRESHOLD = 80  # 80% Memory usage
DISK_THRESHOLD = 80  # 80% Disk usage

def check_cpu_usage():
    cpu_usage = psutil.cpu_percent(interval=1)
    if cpu_usage > CPU_THRESHOLD:
        logging.warning(f"High CPU usage detected: {cpu_usage}%")
        print(f"Warning: High CPU usage detected: {cpu_usage}%")
    else:
        logging.info(f"CPU usage is normal: {cpu_usage}%")

def check_memory_usage():
    memory_info = psutil.virtual_memory()
    memory_usage = memory_info.percent
    if memory_usage > MEMORY_THRESHOLD:
        logging.warning(f"High memory usage detected: {memory_usage}%")
        print(f"Warning: High memory usage detected: {memory_usage}%")
    else:
        logging.info(f"Memory usage is normal: {memory_usage}%")

def check_disk_usage():
    disk_info = psutil.disk_usage('/')
    disk_usage = disk_info.percent
    if disk_usage > DISK_THRESHOLD:
        logging.warning(f"High disk usage detected: {disk_usage}%")
        print(f"Warning: High disk usage detected: {disk_usage}%")
    else:
        logging.info(f"Disk usage is normal: {disk_usage}%")

def check_running_processes():
    processes = psutil.process_iter(['pid', 'name'])
    print("Running processes:")
    for process in processes:
        print(f"PID: {process.info['pid']}, Name: {process.info['name']}")

if __name__ == "__main__":
    while True:
        check_cpu_usage()
        check_memory_usage()
        check_disk_usage()
        check_running_processes()
        time.sleep(60)  # Check every minute



PYTHON SCRIPT FOR APPLICATION HEALTH CHECKER:
import requests
def check_application_health():
    try:
        response = requests.get(app_url)
        if response.status_code == 200:
            print(f"Application is UP and running. Status Code: {response.status_code}")
        else:
      
print(f"Application is DOWN. Status Code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error checking application health: {e}")

if __name__ == "__main__":
    check_application_health()
